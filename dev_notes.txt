# Robot Teleop
run <roslaunch nightingale_teleop keyboard.launch> to move robot with keyboard
this automatically sets the robot in tractor mode

# Code Formatting
To format code install black formatter for python and clang for cpp.
Remember to use google style with Clang
Black - install: <pip install black> usage: <black [file or directory]>
Clang - install: <sudo apt install clang-format> usage: <clang-format --style=Google -i [filename]>
Clang info here: https://clang.llvm.org/docs/ClangFormatStyleOptions.html

# ROS Install
This metapackage uses vcstool to keep track of 3rd party packages that must be built from source
See ROS page on vcstool for context
Repositories can be imported with "vcs import src/ < src/nightingale/nightingale.rosinstall && vcs import src/ < src/kinova-movo/movo.rosinstall" from the root of the ws

# Simulation
Simulation of Movo in hospital can be spawned with <roslaunch nightingale_simulation simulation.launch 2> >(grep -v TF_REPEATED_DATA buffer_core)>
The last part hides some annoying logs that can be ignored
This brings up all movo core nodes (sensors, motion, etc) and moveit
This also brings up RVIZ

# Mapping
launch gmapping with <roslaunch nightingale_navigation mapping.launch>
drive the robot around and generate the map
the map is publsihed to /map. you can visualize it through rviz
save the map with <rosrun map_server map_saver -f 'map'>

# Localization
launch the map server and amcl with <roslaunch nightingale_navigation localization.launch>
the /particlecloud topic shows the estimated pose array. you can visualize it through rviz

# Map Frame Visualizer
This python script visualizes a map gotten with gmapping in the map frame. Use -h for usage
Script is in nightingale_utils/src/map_frame_visualizer.py
 
